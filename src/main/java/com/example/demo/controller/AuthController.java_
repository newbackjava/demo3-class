package com.example.demo.controller;

import com.example.demo.entity.User;
import com.example.demo.service.UserDetailsServiceImpl;
import com.example.demo.util.JwtUtil;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.Optional;

@Controller
@RequestMapping("/auth")
@RequiredArgsConstructor
public class AuthController {

    private final AuthenticationManager authenticationManager;
    private final JwtUtil jwtUtil;
    private final UserDetailsServiceImpl userDetailsService;

    /**
     * ✅ 로그인 API (JWT 발급)
     */
    @PostMapping("/login3")
    @ResponseBody
    public Map<String, String> login(@RequestBody User user, HttpServletResponse response) {
        System.out.println("📢 서버로 전달된 로그인 요청: " + user);

        String username = user.getUsername();
        String password = user.getPassword();
        Authentication authentication;

        // 인증 시도
        try {
            authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(username, password));
        } catch (BadCredentialsException e) {
            return Map.of("error", "로그인 실패: 잘못된 사용자 이름 또는 비밀번호");
        }

        // 사용자 정보 조회
        UserDetails userDetails = userDetailsService.loadUserByUsername(username);
        if (userDetails == null) {
            return Map.of("error", "로그인 실패: 사용자 정보를 찾을 수 없습니다");
        }

        System.out.println(userDetails.getUsername() + "==============\n" +
                            userDetails.getPassword() + "==============\n" +
                            userDetails.getAuthorities());

        // 역할(Role) 가져오기
        String role = userDetails.getAuthorities().isEmpty() ? "ROLE_USER"
                : userDetails.getAuthorities().iterator().next().getAuthority();

        // ✅ JWT 토큰 생성
        String token = jwtUtil.generateToken(userDetails.getUsername(), role);

        // ✅ HTTPOnly 쿠키에 JWT 저장
        Cookie cookie = new Cookie("accessToken", token);
        cookie.setHttpOnly(true);
        cookie.setPath("/");
        cookie.setMaxAge(86400); // 1일 (초 단위)
        cookie.setAttribute("SameSite", "None"); // ✅ CORS 문제 방지
        response.addCookie(cookie);

        System.out.println("✅ 발급된 JWT: " + token);
        return Map.of("message", "로그인 성공!", "token", token);
    }

    /**
     * ✅ 로그아웃 API (JWT 삭제)
     */
    @GetMapping("/logout3")
    public String logout(HttpServletResponse response) {
        // ✅ 쿠키에서 JWT 제거
        Cookie cookie = new Cookie("accessToken", "");
        cookie.setHttpOnly(true);
        cookie.setPath("/");
        cookie.setMaxAge(0); // 즉시 만료
        response.addCookie(cookie);

        return "redirect:/";
    }

    /**
     * ✅ CSRF 토큰 조회 API
     */
    @GetMapping("/csrf-token")
    @ResponseBody
    public Map<String, String> getCsrfToken(HttpServletRequest request) {
        // Spring Security에서 자동으로 생성한 CSRF 토큰 가져오기
        CsrfToken csrfToken = (CsrfToken) request.getAttribute("_csrf");
        System.out.println("🔹 CSRF 토큰: " + (csrfToken != null ? csrfToken.getToken() : "없음"));

        return csrfToken != null ? Map.of("token", csrfToken.getToken())
                : Map.of("error", "CSRF token not found");
    }

    /**
     * ✅ 로그인한 사용자 정보 조회 API (JWT 검증)
     */
    @GetMapping("/user-info")
    @ResponseBody
    public Map<String, String> getUserInfo(@CookieValue(name = "accessToken", required = false) String token) {
        // ✅ JWT 토큰이 없는 경우
        if (token == null || token.isEmpty()) {
            return Map.of("error", "로그인 정보 없음");
        }

        // ✅ JWT 유효성 검사
        if (!jwtUtil.isTokenValid(token)) {
            return Map.of("error", "토큰이 유효하지 않음");
        }

        // ✅ JWT에서 사용자명 및 역할 추출
        String username = jwtUtil.extractUsername(token);
        String role = jwtUtil.extractRole(token);

        System.out.println("✅ 로그인된 사용자: " + username + " | 역할: " + role);

        return Map.of("username", username, "role", role);
    }
}
